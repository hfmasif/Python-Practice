# How to create lambda Functions

# First normal function to add integer 5 in given number
def add_five(num):
    result = num + 5
    return result

x = 7
print(add_five(x))

# Same program using lambda function
add_five = lambda number : number + 5

x = 7
print(add_five(x))


# # write a lambda function to add two input numbers
add_two_numbers = lambda num1, num2 : (num1 + num2) + 50

x = 10
y = 20
print(add_two_numbers(x, y))


# write a lambda function to concatinate two string
concat_two_string = lambda str1, str2 : str1 + str2

x = 'Asif '
y = 'Khan'
print(concat_two_string(x, y))

# Write a lambda funtion to calculate maximum of two numbers
# using normal funciton
def max_two_num(a, b):
    if a > b:
        return a
    else:
        return b

x = 5
y = 2
print(max_two_num(x, y))

# using lambda function
max_two_num_lambda = lambda a, b: a if a > b else b

num1 = 50
num2 = 214
print(max_two_num_lambda(num1, num2))


# How to work with map(), filter(), reduce()

# map()
# implement map function
list1 = [1,2,3,4,5,6,7,8,9]
# Result
# result = [1,4,9,16,25,36,49,64,81]
square_num = lambda x : x*x
# syntax -> var_name = map(func, iter1)
square_list = list(map(square_num, list1)) # just alternate => for i in list1: print(square_num[i])
print(square_list)

# Add sequential respective elements in two given lists
list_a = [1,2,3,4,5]
list_b = [5,4,3,2,1]
# result = [6, 6, 6, 6, 6]
sum_two_elements = lambda x, y : x + y
result = list(map(sum_two_elements, list_a, list_b))
print(result)


# reduce()
# How to use reduce ??
import functools

list_x = [1,2,3,4,5]
add_two_nums = lambda x, y : x + y
result = functools.reduce(add_two_nums, list_x)
print(result)

multiply_two_nums = lambda x, y : x * y
result = functools.reduce(multiply_two_nums, list_x)
print(result)


# filter()
# How to use filter ?

seq = [1,2,5,6,9,7,10]
# create list of only odd elements
filter_odd = lambda x : x % 2 != 0
result = list(filter(filter_odd, seq))
print(result)
# create list of only even elements 
filter_even = lambda x : x % 2 == 0
result = list(filter(filter_even, seq))
print(result)
