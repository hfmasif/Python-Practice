# class Employee:
#     empCount = 0

#     def __init__(self, name, salary):
#         self.emp_name = name
#         self.emp_salary = salary
#         Employee.empCount += 1

#     def displayEmployeeInfo(self):
#         print(self.emp_name, self.emp_salary)

#     def displayEmployeeCount(self):
#         print("Count Employee :", Employee.empCount)

# emp1 = Employee("Asif", 50000)
# emp1.displayEmployeeInfo()
# emp1.displayEmployeeCount()

# emp2 = Employee("Sakib", 21000)
# emp2.displayEmployeeInfo()
# emp2.displayEmployeeCount()

# # print instance variables of a objects
# print(emp1.emp_name)
# print(emp1.emp_salary)
# print(emp2.emp_name)
# print(emp2.emp_salary)

# # lets access Class variable from instance itself
# print(emp1.empCount)
# print(emp2.empCount)

# emp1.empCount = 10
# emp2.empCount = 20
# print(emp1.empCount)
# print(emp2.empCount)
# print(Employee.empCount)


# What is static method in python ?
# Static method can be called without and obeject for the class
# ex-1
class Car:
    
    def __init__(self, name, color):
        self.car_name = name
        self.car_color = color

    def displayCarDetails(self):
        print("Car name is ", self.car_name, " and Car color is ", self.car_color)

    @staticmethod
    def initialMessage():
        print("Nice Car !!!!!")

Car.initialMessage() # It is working without even creating object
# Car.displayCarDetails() # This will not work

car1 = Car('SUV-700', 'Red')
car1.displayCarDetails()


# ex-2
class Employee:
    @staticmethod
    def isEmployeeOf():
        print("I am an Employee of iNeuron !!")

Employee.isEmployeeOf()


# ex-3
class Calculation:
    @staticmethod
    def addTwoNums(num1, num2):
        print("Sum of two numbers =", num1 + num2)

Calculation.addTwoNums(10, 5)
